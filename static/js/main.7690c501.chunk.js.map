{"version":3,"sources":["Components/FreshPostInfo.js","Components/FreshCard.js","App.js","serviceWorker.js","index.js"],"names":["FreshPostInfo","props","react_default","a","createElement","className","src","img","alt","title","url","FreshCard","Components_FreshPostInfo","postInfo","media","oembed","thumbnail_url","App","_useState","useState","_useState2","Object","slicedToArray","freshPosts","setFreshPosts","useEffect","_fetchPosts","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","hhhJson","data","children","catch","error","console","stop","apply","this","arguments","fetchPosts","map","value","index","Components_FreshCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAYeA,MAVf,SAAuBC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,IAAKC,IAAI,kBACzBN,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,OACVP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,aCKPC,MARf,SAAmBV,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACQ,EAAD,CAAeH,MAAOR,EAAMY,SAASJ,MAAOC,IAAKT,EAAMY,SAASH,IAAKH,IAA6B,MAAxBN,EAAMY,SAASC,MAAgBb,EAAMY,SAASC,MAAMC,OAAOC,cAAgB,OC0BlJC,MA7Bf,WAAe,IAAAC,EACuBC,mBAAS,IADhCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACMI,EADNJ,EAAA,GAoBb,OAjBAK,oBAAU,WAAM,SAAAC,IAAA,OAAAA,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAAzB,EAAA0B,KACd,SAAAC,IAAA,OAAAF,EAAAzB,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACEC,MAAM,2DACHC,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJf,EAAce,EAAQC,KAAKC,YAE5BC,MAAM,SAAAC,GAAK,OACVC,QAAQD,MAAM,8BAA+BA,KATnD,wBAAAX,EAAAa,SAAAf,OADcgB,MAAAC,KAAAC,YAAA,WAAAtB,EAAAoB,MAAAC,KAAAC,WAcdC,IACC,IAGD/C,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACdkB,EAAW2B,IAAI,SAACC,EAAOC,GACtB,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,CAAWC,IAAKF,EAAOvC,SAAUsC,EAAMX,WCflCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.7690c501.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction FreshPostInfo(props) {\r\n    return (\r\n        <div className=\"FreshPost\">\r\n            <img src={props.img} alt=\"thumbnail img\"/>\r\n            <p>{props.title}</p>\r\n            <p>{props.url}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FreshPostInfo;","import React from 'react';\r\nimport FreshPostInfo from './FreshPostInfo';\r\nimport '../Card.css';\r\n\r\nfunction FreshCard(props) {\r\n    return (\r\n        <div className=\"FreshCard\">\r\n            <FreshPostInfo title={props.postInfo.title} url={props.postInfo.url} img={props.postInfo.media != null ? props.postInfo.media.oembed.thumbnail_url : \"\"}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FreshCard;","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport FreshCard from './Components/FreshCard';\n\nfunction App() {\n  const [freshPosts, setFreshPosts] = useState([]);\n\n  useEffect(() => {\n    async function fetchPosts() {\n      fetch(\"https://www.reddit.com/r/hiphopheads/hot.json?count=500\")\n        .then(function (response) {\n          return response.json();\n        })\n        .then(hhhJson => {\n          setFreshPosts(hhhJson.data.children);\n        })\n        .catch(error =>\n          console.error('Error Grabbing FRESH Music:', error)\n        );\n    }\n\n    fetchPosts();\n  }, []);\n\n  return ( \n    <div className = \"App\" >\n      {freshPosts.map((value, index) => {\n        return <FreshCard key={index} postInfo={value.data}/>\n      })}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}